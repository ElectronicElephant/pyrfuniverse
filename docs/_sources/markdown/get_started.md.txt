(get_started_1)=
# Get Started

## Installation

Follow the steps below to configure and run the sample scene through the published version:

1. Download the [RFUniverse Releases](https://github.com/mvig-robotflow/rfuniverse/releases) and unzip it:
   
    Run the program once, enter the scene and then close it:

    Linux：`RFUniverse_For_Linux/RFUniverse.x86_64`

    Windows：`RFUniverse_For_Windows/RFUniverse.exe`

2. Clone the pyrfuniverse, switch to the Tag with the **same version number** as the RFUniverse Release (e.g. v0.8.3):
   
   ```bash
   git clone https://github.com/mvig-robotflow/pyrfuniverse.git
   cd pyrfuniverse
   git checkout v0.8.3
   ```

3. Create a conda environment and activate it, install the 'pyrfuniverse' package with the **same version number** as the RFUniverse Release (e.g. v0.8.3):
    
    ```bash
    conda create -n rfuniverse python=3.8 -y
    conda activate rfuniverse
    pip install -e .
    ```

4. Run any Python script under 'pyrfuniverse/Test' (some scripts may require installation of large packages such as 'pybullet', 'open3d', etc.):
   
   ```bash
   cd Test
   python test_pick_and_place.py
   ```

---

## Enter Edit mode

For users who are not familiar with Unity Editor, we also develop a GUI executable file where users can edit their own scenes and save to a JSON file. The JSON file can be loaded when instanciating RFUniverse environment.

Launch RFUniverse with the <-edit> parameter to enter Edit mode:

Linux:

```
RFUniverse.x86_64 -edit
```

Windows:

```
RFUniverse.exe -edit
```

For loading JSON file during runtime, please see [this code segment](load_json) for detail.

---

## Core Classes

### Attributes

`Attr` is the basic unit of objects in RFUniverse. All objects are derived from `BaseAttr`, such as `GameObjectAttr`, `RigidbodyAttr`, `ControllerAttr`, `CameraAttr`, etc.

![mermaid.png](mermaid.png)

- `BaseAttr` provides basic object loading, creation, deletion, movement, and other attributes.
- `GameObjectAttr` extends simple visual effect modification for objects.
- `ColliderAttr` extends modification functions for an object's collider.
- `RigidbodyAttr` extends the rigid body properties of objects.
- `ControllerAttr` extends the operation of robotic arm joints.
- `CameraAttr` extends image capture capabilities for cameras.
- `LightAttr` extends light control functionality.
- `PointCloudAttr` extends point cloud import and rendering functionality.

### Manager

The `Manager` is responsible for receiving and sending different types of data. Each `Manager` has an independent channel to communicate with Python, and during runtime, data is received or sent through the channel.

- `AssetManager`: Responsible for the common interface and data transmission in the environment.
- `InstanceManager`: Responsible for distributing and collecting interfaces and data for different Attrs.
- `DebugManager`: Responsible for debugging functionality.
